Go基础知识：
  1.变量和常量
    基本类型：
        bool
        数字类型
          int8, int16, int32, int64, int
          uint8, uint16, uint32, uint64, uint
          float32, float64
          complex64, complex128
          byte
          rune
          byte 是 uint8 的别名。
          rune 是 int32 的别名。
        string
    Go 有着非常严格的强类型特征。Go 没有自动类型提升或类型转换。
    常量不能再重新赋值为其他的值。
    常量的值会在编译的时候确定。因为函数调用发生在运行时，所以不能将函数的返回值赋值给常量。
    常量没有任何类型。无类型的常量有一个与它们相关联的默认类型，并且当且仅当一行代码需要时才提供它。
    数字常量可以在表达式中自由混合和匹配，只有当它们被分配给变量或者在需要类型的代码中的任何地方使用时，才需要类型。
    
  2.函数和包
    多返回值、命名返回值、空白符
    包用于组织 Go 源代码，提供了更好的可重用性与可读性。
    属于某一个包的源文件都应该放置于一个单独命名的文件夹里。按照 Go 的惯例，应该用包名命名该文件夹。
    在 Go 中，任何以大写字母开头的变量或者函数都是被导出的名字。其它包只能访问被导出的函数和变量。
    所有包都可以包含一个 init 函数。init 函数不应该有任何返回值类型和参数，在我们的代码中也不能显式地调用它。
    init 函数可用于执行初始化任务，也可用于在开始执行之前验证程序的正确性。
    包的初始化顺序如下：
        首先初始化包级别（Package Level）的变量
        紧接着调用 init 函数。包可以有多个 init 函数（在一个文件或分布于多个文件中），它们按照编译器解析它们的顺序进行调用。
    如果一个包导入了另一个包，会先初始化被导入的包。尽管一个包可能会被导入多次，但是它只会被初始化一次。
    导入了包，却不在代码中使用它，这在 Go 中是非法的。当这么做时，编译器是会报错的。其原因是为了避免导入过多未使用的包，从而导致编译时间显著增加。
    然而，在程序开发的活跃阶段，又常常会先导入包，而暂不使用它。遇到这种情况就可以使用空白标识符 _。
    var _ = rectangle.Area 这一行屏蔽了错误。我们应该了解这些错误屏蔽器（Error Silencer）的动态，在程序开发结束时就移除它们，包括那些还没有使用过的包。
    由此建议在 import 语句下面的包级别范围中写上错误屏蔽器。
    有时候我们导入一个包，只是为了确保它进行了初始化，而无需使用包中的任何函数或变量。这种情况也可以使用空白标识符。
    
  3.if/else和循环和switch
    if 还有另外一种形式，它包含一个 statement 可选语句部分，该组件在条件判断之前运行。它的语法是
      if statement; condition {  
      }
    else 语句应该在 if 语句的大括号 } 之后的同一行中。如果不是，编译器会不通过。出错的原因是 Go 语言的分号是自动插入。
    在 Go 语言规则中，它指定在 } 之后插入一个分号，如果这是该行的最终标记。因此，在if语句后面的 } 会自动插入一个分号。
    
    for 是 Go 语言唯一的循环语句。Go 语言中并没有其他语言比如 C 语言中的 while 和 do while 循环。
    for initialisation; condition; post {  
    }
    这三个组成部分，即初始化，条件和 post 都是可选的。
    无限循环的语法是：
    for {  
    }
    switch 是一个条件语句，用于将表达式的值与可能匹配的选项列表进行比较，并根据匹配情况执行相应的代码块。
    它可以被认为是替代多个 if else 子句的常用方式。
    在选项列表中，case 不允许出现重复项。
    default 不一定只能出现在 switch 语句的最后，它可以放在 switch 语句的任何地方。
    在表达式求值之前，switch 可以选择先执行一个语句。
    多表达式判断：通过用逗号分隔，可以在一个 case 中包含多个表达式。
    无表达式的 switch：在 switch 语句中，表达式是可选的，可以被省略。这种类型的 switch 语句可以替代多个 if else 子句。
    如果省略表达式，则表示这个 switch 语句等同于 switch true，并且每个 case 表达式都被认定为有效，相应的代码块也会被执行。
    在 Go 中，每执行完一个 case 后，会从 switch 语句中跳出来，不再做后续 case 的判断和执行。
    使用 fallthrough 语句可以在已经执行完成的 case 之后，把控制权转移到下一个 case 的执行代码中。
    fallthrough 语句应该是 case 子句的最后一个语句。如果它出现在了 case 语句的中间，编译器将会报错：fallthrough statement out of place
    
  4.数组和切片
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
